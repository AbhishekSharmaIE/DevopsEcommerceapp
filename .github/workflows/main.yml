name: Ecommerce App CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  EC2_HOST: ec2-52-214-107-96.eu-west-1.compute.amazonaws.com
  EC2_USER: ubuntu
  FLASK_ENV: development
  FLASK_APP: app.app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        pytest tests/ || true

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build application
      run: |
        mkdir -p deploy/app
        cp -r app/* deploy/app/
        cp requirements.txt deploy/
        cp Procfile deploy/
        cp nginx.conf deploy/
        cp gunicorn.service deploy/
        cp gunicorn.socket deploy/
        cp -r scripts deploy/
        chmod +x deploy/scripts/*.sh
        cp appspec.yml deploy/
        cd deploy
        zip -r ../app.zip . -x "*.git*" "*.pyc" "*.pyo" "*.pyd" "*.so" "*.egg" "*.egg-info" "__pycache__/*" "*.swp" "*.swo" "*.bak" "*.tmp" "*.log" "*.pid" "*.pid.lock" "*.lock" "*.DS_Store" "*.idea/*" "*.vscode/*" "*.env" "*.venv" "venv/*" "node_modules/*"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: app.zip
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: .
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ecommerce-app-key-eu.pem
        chmod 600 ~/.ssh/ecommerce-app-key-eu.pem
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/ecommerce-app-key-eu.pem
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      run: |
        scp -i ~/.ssh/ecommerce-app-key-eu.pem -o StrictHostKeyChecking=no app.zip ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/tmp/
        
    - name: Execute deployment script
      run: |
        ssh -i ~/.ssh/ecommerce-app-key-eu.pem -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} 'bash -s' << 'ENDSSH'
          set -e
          
          # Create directory if it doesn't exist
          sudo mkdir -p /var/www/html/ecommerce
          
          # Set proper permissions
          sudo chown -R ubuntu:ubuntu /var/www/html/ecommerce
          
          # Unzip the application
          cd /tmp
          sudo unzip -o app.zip -d /var/www/html/ecommerce
          
          # Set permissions for the application
          sudo chown -R ubuntu:ubuntu /var/www/html/ecommerce
          sudo chmod -R 755 /var/www/html/ecommerce
          
          # Install Python dependencies
          cd /var/www/html/ecommerce
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-venv
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Setup Gunicorn
          sudo cp gunicorn.service /etc/systemd/system/
          sudo cp gunicorn.socket /etc/systemd/system/
          sudo systemctl daemon-reload
          sudo systemctl enable gunicorn.socket
          sudo systemctl start gunicorn.socket
          
          # Setup Nginx
          sudo apt-get install -y nginx
          sudo cp nginx.conf /etc/nginx/sites-available/ecommerce
          sudo ln -sf /etc/nginx/sites-available/ecommerce /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          sudo systemctl restart nginx
          
          # Start the application
          sudo systemctl restart gunicorn
          
          # Verify services are running
          sudo systemctl status gunicorn
          sudo systemctl status nginx
        ENDSSH 